services:
  zookeeper:
    image: confluentinc/cp-zookeeper:7.6.0
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
      TZ: Asia/Taipei

  kafka:
    image: confluentinc/cp-kafka:7.6.0
    container_name: kafka
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
      TZ: Asia/Taipei
    depends_on:
      - zookeeper
    healthcheck:
      test: ["CMD-SHELL", "kafka-topics --bootstrap-server localhost:9092 --list"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s

  kafka_ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka_ui
    ports:
      - "8080:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:9092
      KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181
      TZ: Asia/Taipei
    depends_on:
      - kafka
      - zookeeper

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    ports: 
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
    command: 
      - "--config.file=/etc/prometheus/prometheus.yml"
    depends_on:
      - weather_consumer
      - weather_pipeline
      - weather_fetcher
  
  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - "3000:3000"
    environment:
      TZ: Asia/Taipei
    volumes: 
      - grafana_data:/var/lib/grafana
    depends_on:
      - prometheus

  mongodb:
    image: mongo:6
    container_name: mongodb
    ports:
      - "27017:27017"
    volumes:
      - mongo_data:/data/db
    environment:
      TZ: Asia/Taipei
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.runCommand({ ping: 1})", "--quiet"]
      interval: 10s
      timeout: 5s
      retries: 5

  weather_pipeline:
    build:
      context: ..
      dockerfile: docker/producer.Dockerfile
    container_name: weather_pipeline
    ports:
      - "8001:8001"
    env_file:
      - ../config/.env
    environment:
      - PYTHONUNBUFFERED=1
      - KAFKA_BROKER=kafka:9092
      - TZ=Asia/Taipei
    depends_on:
      kafka: 
        condition: service_healthy
      mongodb:
        condition: service_healthy
    volumes:
      - ../logs:/app/logs

  weather_consumer:
    build:
      context: ..
      dockerfile: docker/consumer.Dockerfile
    env_file:
      - ../config/.env
    environment:
      - PYTHONUNBUFFERED=1
      - KAFKA_BROKER=kafka:9092
      - TZ=Asia/Taipei
    depends_on:
      kafka:
        condition: service_healthy
      mongodb:
        condition: service_healthy
    volumes:
      - ../logs:/app/logs
    deploy:
      replicas: 1
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 20s
      
  weather_fetcher:
    build:
      context: ..
      dockerfile: docker/fetcher.Dockerfile
    ports:
      - "8002:8002"
    container_name: weather_fetcher
    env_file:
      - ../config/.env
    environment:
      - PYTHONUNBUFFERED=1
      - KAFKA_BROKER=kafka:9092
      - TZ=Asia/Taipei
    depends_on:
      kafka:
        condition: service_healthy
    volumes:
      - ../logs:/app/logs
  # stress_test_producer:
  #   build:
  #     context: ..
  #     dockerfile: docker/producer.Dockerfile
  #   container_name: stress_test_producer
  #   command: ["python", "-m", "producer_service.stress_test_producer"]
  #   env_file:
  #     - ../config/.env
  #   environment:
  #     - PYTHONUNBUFFERED=1
  #     - KAFKA_BROKER=kafka:9092
  #     - TZ=Asia/Taipei
  #   depends_on:
  #     kafka:
  #       condition: service_healthy
  #     weather_consumer:
  #       condition: service_healthy
volumes:
  mongo_data:
  logs:
  grafana_data:
